"""
Django settings for src project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

from decouple import Csv, config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
SECRET_KEY = config("SECRET_KEY", default="sample-key")
DEBUG = config("DEBUG", default=False, cast=bool)

ALLOWED_HOSTS = config("ALLOWED_HOSTS", default="", cast=Csv())

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
    "allauth.socialaccount.providers.github",
    "allauth.socialaccount.providers.twitter",
    "allauth.socialaccount.providers.facebook",
    "storages",
    # apps
    "core",
    "books",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = "urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates", BASE_DIR / "src/templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": config("POSTGRES_DB", default=None),
        "USER": config("POSTGRES_USER", default=None),
        "PASSWORD": config("POSTGRES_PASSWORD", default=None),
        "HOST": config("DB_HOST", default="localhost"),
        "PORT": config("DB_PORT", default=5432),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

# Provider specific settings
SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "APP": {
            "client_id": config("OAUTH_GOOGLE_CLIENT_ID", default=""),
            "secret": config("OAUTH_GOOGLE_SECRET", default=""),
        },
        "SCOPE": [
            "profile",
            "email",
        ],
        "AUTH_PARAMS": {
            "access_type": "online",
            "prompt": "consent",
        },
        "REDIRECT_URI": "http://127.0.0.1:8000/accounts/google/login/callback/",
    },
    "github": {
        "APP": {
            "client_id": config("OAUTH_GITHUB_CLIENT_ID", default=""),
            "secret": config("OAUTH_GITHUB_SECRET", default=""),
        },
        "SCOPE": ["user:email"],
        "AUTH_PARAMS": {
            "prompt": "consent",
        },
        "REDIRECT_URI": "http://127.0.0.1:8000/accounts/github/login/callback/",
    },
    "twitter": {
        "APP": {
            "client_id": config("OAUTH_TWITTER_CLIENT_ID", default=""),
            "secret": config("OAUTH_TWITTER_SECRET", default=""),
        },
        "REDIRECT_URI": "http://127.0.0.1:8000/accounts/twitter/login/callback/",
    },
    "facebook": {
        "APP": {
            "client_id": config("OAUTH_FACEBOOK_CLIENT_ID", default=""),
            "secret": config("OAUTH_FACEBOOK_SECRET", default=""),
        },
        "AUTH_PARAMS": {
            "auth_type": "reauthenticate",
        },
    },
}

# skipping default page after login 'accounts/google/login/'
SOCIALACCOUNT_LOGIN_ON_GET = True

# for log in required pages/route redirect to below and same after logout to landing
LOGIN_URL = "login"
LOGOUT_REDIRECT_URL = "login"

# make sure one unique email is used for all social accounts
SOCIALACCOUNT_AUTO_SIGNUP = True
ACCOUNT_UNIQUE_EMAIL = True
SOCIALACCOUNT_EMAIL_VERIFICATION = "none"
SOCIALACCOUNT_EMAIL_AUTHENTICATION = True
SOCIALACCOUNT_EMAIL_AUTHENTICATION_AUTO_CONNECT = True

# required to collect email from all social accounts particulary X working with oauth 1.0
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = "optional"

ACCOUNT_ADAPTER = "core.adapter.CustomAccountAdapter"
SOCIALACCOUNT_ADAPTER = "core.adapter.SocialAccountAdapter"

RAZORPAY_KEY_ID = config("RAZORPAY_KEY_ID", default="")
RAZORPAY_KEY_SECRET = config("RAZORPAY_KEY_SECRET", default="")
RAZORPAY_CALLBACK_URL = config("RAZORPAY_CALLBACK_URL", default="")

USE_S3_BUCKET = config("USE_S3_BUCKET", default=False, cast=bool)
if not DEBUG and USE_S3_BUCKET:
    # AWS CONFIG
    AWS_ACCESS_KEY_ID = config("AWS_ACCESS_KEY_ID", default="")
    AWS_SECRET_ACCESS_KEY = config("AWS_SECRET_ACCESS_KEY", default="")
    AWS_STORAGE_BUCKET_NAME = config("AWS_STORAGE_BUCKET_NAME", default="")
    AWS_S3_REGION_NAME = config("AWS_S3_REGION_NAME", default="")
    AWS_S3_CUSTOM_DOMAIN = f"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com"

    # Static files (CSS, JavaScript, images)
    STATIC_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/static/"
    STATICFILES_DIRS = [
        BASE_DIR / "static",
    ]

    # Media files (uploads like book covers, book files)
    MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/media/"
    STORAGES = {
        "default": {
            "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
        },
        "staticfiles": {
            "BACKEND": "storages.backends.s3boto3.S3StaticStorage",
        },
    }
else:
    STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

    # Static files (CSS, JavaScript, Images)
    STATIC_URL = "/static/"
    STATICFILES_DIRS = [
        BASE_DIR / "static",
    ]
    STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
    # Media files
    MEDIA_URL = "/media/"
    MEDIA_ROOT = os.path.join(BASE_DIR, "media")
